<?php

if ( ! function_exists( 'wp_handle_upload' ) ) {
    require_once( ABSPATH . 'wp-admin/includes/file.php' );
}

class MPR_Core {


    public static function check_login(){
        if( is_user_logged_in() !== true ):
            wp_safe_redirect(site_url() . '/login-register');
        endif;
    }

    public static function is_instructor(){
        $user = wp_get_current_user();
        if ( in_array( 'stm_lms_instructor', (array) $user->roles ) ):
            return true;
        else:
            return false;
        endif;
    }

    public static function upload_media($file, $post_id = null){

        // handle video upload
        $uploadedfile = $file;
        $upload_overrides = array(
            'test_form' => false
        );

        $movefile = wp_handle_upload( $uploadedfile, $upload_overrides );

        if ( $movefile && ! isset( $movefile['error'] ) ) {

            if( is_array($movefile) && !empty($movefile) ):

                // $filename should be the path to a file in the upload directory.
                $filename = $movefile['file'];
                //$filename = '/path/to/uploads/2013/03/filename.jpg';

                // The ID of the post this attachment is for.
                $parent_post_id = $post_id;

                // Check the type of file. We'll use this as the 'post_mime_type'.
                $filetype = wp_check_filetype( basename( $filename ), null );

                // Get the path to the upload directory.
                $wp_upload_dir = wp_upload_dir();

                // Prepare an array of post data for the attachment.
                $attachment = array(
                    'guid'           => $wp_upload_dir['url'] . '/' . basename( $filename ),
                    'post_mime_type' => $filetype['type'],
                    'post_title'     => preg_replace( '/\.[^.]+$/', '', basename( $filename ) ),
                    'post_content'   => '',
                    'post_status'    => 'inherit'
                );

                // Insert the attachment.
                $attach_id = wp_insert_attachment( $attachment, $filename, $parent_post_id );

                // Make sure that this file is included, as wp_generate_attachment_metadata() depends on it.
                require_once( ABSPATH . 'wp-admin/includes/image.php' );

                // Generate the metadata for the attachment, and update the database record.
                $attach_data = wp_generate_attachment_metadata( $attach_id, $filename );
                wp_update_attachment_metadata( $attach_id, $attach_data );

                set_post_thumbnail( $parent_post_id, $attach_id );

                return $attach_id;
            else:
                return false;
            endif;


        } else {
            /*
             * Error generated by _wp_handle_upload()
             * @see _wp_handle_upload() in wp-admin/includes/file.php
             */
            //echo $movefile['error'];
            return $movefile;
        }
    }

    public static function mpr_instructor_register($data) {

        $check_nonce = check_ajax_referer( 'mpr_instructor_register', 'register_nonce' );
        if( $check_nonce == 1 ):
            // nonce is valid
            // sanitize_text_field( $str )

            /*Add check for login*/
            if ( sanitize_user( $data['user_email_register'], true ) !== $data['user_email_register'] ) {
                $r['message'] =  esc_html__( 'Please remove tags, octets and entities from email', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die();
            }

            /*If password is equal*/
            if ( $data['user_password_register'] !== $data['user_password_register_retype'] ) {
                $r['message'] = esc_html__( 'Passwords do not match', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            }
            /* If Password shorter than 8 characters*/
            if ( strlen( $data['user_password_register'] ) < 8 ) {
                $r['message'] = esc_html__( 'Password must have at least 8 characters', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            }
            /* if Password longer than 20 -for some tricky user try to enter long characters to block input.*/
            if ( strlen( $data['user_password_register'] ) > 30 ) {
                $r['message'] = esc_html__( 'Password too long', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            }
            /* if contains letter */
            if ( ! preg_match( '#[a-z]+#', $data['user_password_register'] ) ) {
                $r['message'] = esc_html__( 'Password must include at least one lowercase letter!', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            }
            /* if contains number */
            if ( ! preg_match( '#[0-9]+#', $data['user_password_register'] ) ) {
                $r['message'] = esc_html__( 'Password must include at least one number!', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            }
            /* if contains CAPS */
            if ( ! preg_match( '#[A-Z]+#', $data['user_password_register'] ) ) {
                $r['message'] = esc_html__( 'Password must include at least one capital letter!', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            }

            /*Now we have valid data*/
//            $user = wp_create_user( $data['user_email_register'], $data['user_password_register'], $data['user_email_register'] );
//
//            if ( is_wp_error( $user ) ) {
//                $r['message'] = $user->get_error_message();
//                wp_send_json( $r );
//                die();
//            } else {
//                $r['message'] = $user;
//                wp_send_json( $r );
//                die();
//            }

            $userdata = array(
                'user_email' =>  $data['user_email_register'],
                'user_login' =>  $data['user_email_register'],
                'user_pass'  =>  $data['user_password_register'], // no plain password here!
                'user_nicename' =>  $data['first_name'] . ' ' .  $data['last_name'],
                'display_name' =>  $data['first_name'] . ' ' .  $data['last_name'],
                'nickname' =>  $data['first_name'] . ' ' .  $data['last_name'],
                'first_name' => $data['first_name'],
                'last_name' => $data['last_name'],
                'description' => $data['user_bio'],
                'role' => 'stm_lms_instructor',
                'meta_input' => array(
                    'user_phone' => $data['phone_input'],
                    'course_category_register' => $data['course_category_register'],
                    'has_ready_courses' => $data['has_ready_courses'],
                    'admin_approval' => 0
                )
            );

            $user_id = wp_insert_user( $userdata ) ;

            if( is_int($user_id) ):
                $r['message'] = esc_html__( 'success', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            else:

                foreach ( $user_id->errors as $error ):
                    foreach ( $error as $err_data ):
                        $errors .= $err_data;
                    endforeach;
                endforeach;

                $r['message'] = esc_html__( $errors, 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            endif;

        else:
            $r['message'] = esc_html__( 'Nonce is not correct!', 'masterstudy-lms-learning-management-system' );
            wp_send_json( $r );
            die;
        endif;


    }

    public static function create_new_course($data) {

        $nonce = $data['add_new_course_nonce'];
        if ( ! wp_verify_nonce( $nonce, 'add_new_course' ) ) {
            $r['message'] = esc_html__( 'Nonce is not valid please refresh the page', 'masterstudy-lms-learning-management-system' );
            wp_send_json( $r );
            die;
        } else {
            // nonce is valid

            $course_title = $data['course_title'];
            $course_level = $data['course_level'];
            $course_category = (int) $data['course_category'];
            $video_duration = $data['video_duration'];
            $video_description = $data['video_description'];
//            $course_video_file = $data['course_video_file'];

            if( empty($course_title) ):
                $r['message'] = esc_html__( 'course titel is missing', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            elseif ( empty($course_level) ):
                $r['message'] = esc_html__( 'course level is missing', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
//            elseif ( empty($video_duration) ):
//                $r['message'] = esc_html__( 'course duration is missing', 'masterstudy-lms-learning-management-system' );
//                wp_send_json( $r );
//                die;
            elseif ( empty($video_description) ):
                $r['message'] = esc_html__( 'course description is missing', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
//            elseif ( empty($course_video_file) ):
//                $r['message'] = esc_html__( 'course video is missing', 'masterstudy-lms-learning-management-system' );
//                wp_send_json( $r );
//                die;
            endif;


            // Create post object
            $new_course_date = array(
                'post_title'    => wp_strip_all_tags( $course_title ),
                'post_content'  => wp_strip_all_tags( $video_description ),
                'post_status'   => 'draft',
                'post_author'   => get_current_user_id(),
                'post_type' => 'stm-courses',
                'meta_input' => array(
                    'level' => $course_level,
                    'duration_info' => $video_duration
                )
            );

            // Insert the post into the database
            $insert_course_id = wp_insert_post( $new_course_date );
            if( is_int($insert_course_id) ):
                // update course category
                wp_set_object_terms($insert_course_id, $course_category, 'stm_lms_course_taxonomy');

                // upload course video
//                if( !empty($course_video_file) ):
//                    $upload_video = MPR_Core::upload_media($course_video_file);
//                    if( is_int($upload_video) ):
//                        // update post to 'publish'
//                        $data = array(
//                            'ID' => $insert_course_id,
//                            'post_status' => 'pending',
//                            'meta_input' => array(
//                                'course_video_id' => $upload_video,
//                            )
//                        );
//
//                        wp_update_post( $data );
//                    endif;
//                endif;
                $r['message'] = esc_html__( 'success', 'masterstudy-lms-learning-management-system' );
                $r['course_id'] = $insert_course_id;
                wp_send_json( $r );
                die;
            else:
                $r['message'] = esc_html__( 'Error: course not created successfully', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            endif;


        }


    }

    public static function edit_course($data) {

        $nonce = $data['edit_course_nonce'];
        if ( ! wp_verify_nonce( $nonce, 'edit_course' ) ) {
            $r['message'] = esc_html__( 'Nonce is not valid please refresh the page', 'masterstudy-lms-learning-management-system' );
            wp_send_json( $r );
            die;
        } else {
            // nonce is valid
            $course_id = $data['course_id'];
            $course_title = $data['course_title'];
            $course_duration = $data['course_duration'];
            $course_description = $data['course_description'];
            $attachment_ids = $data['attachment_ids'];
            //$course_video_files = $data['course_video_files'];

            if( empty($course_title) ):
                $r['message'] = esc_html__( 'course titel is missing', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
//            elseif ( empty($course_duration) ):
//                $r['message'] = esc_html__( 'course duration is missing', 'masterstudy-lms-learning-management-system' );
//                wp_send_json( $r );
//                die;
            elseif ( empty($course_description) ):
                $r['message'] = esc_html__( 'course description is missing', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            endif;


            // update title, content and duration
            kses_remove_filters();
            $new_data = array(
                'ID' => $course_id,
                'post_title' => $course_title,
                'post_content' => $course_description,
                'meta_input' => array(
                    'duration_info' => $course_duration
                )
            );

            wp_update_post( $new_data );

            // update course_video_id with sent attachment_ids
            // get old videos in meta
            $old_course_video_ids = get_post_meta($course_id, 'course_video_id', false);
            if( !empty($attachment_ids) ):
                $attachment_ids = explode(',', $attachment_ids);
                foreach ( $attachment_ids as $attachment_id ):
                    if( !in_array($attachment_id, $old_course_video_ids) ):
                        add_post_meta($course_id, 'course_video_id', $attachment_id);
                    endif;
                endforeach;
            endif;

            return 'success';

            // upload files
//            if( !empty($course_video_files) ):
//                $upload_error = [];
//
//                foreach ($course_video_files['name'] as $key => $value):
//                    if ($course_video_files['name'][$key]) {
//                        $file = array(
//                            'name'     => $course_video_files['name'][$key],
//                            'type'     => $course_video_files['type'][$key],
//                            'tmp_name' => $course_video_files['tmp_name'][$key],
//                            'error'    => $course_video_files['error'][$key],
//                            'size'     => $course_video_files['size'][$key]
//                        );
//
//                        $upload_video_id = MPR_Core::upload_media($file);
//                        if( is_int($upload_video_id) ):
//                            add_post_meta($course_id, 'course_video_id', $upload_video_id);
//                        else:
//                            $upload_error[] = true;
//                        endif;
//                    }
//                endforeach;
//
//            endif;

//            if( !empty($upload_error) ):
//                return 'Error in uploading videos, please refresh page and try again';
//            else:
//                return 'success';
//            endif;

        }


    }

    // add new assignment by instructor
    public static function create_new_assignment($data) {

        $nonce = $data['add_new_assignment_nonce'];
        if ( ! wp_verify_nonce( $nonce, 'add_new_assignment_nonce' ) ) {
            $r['message'] = esc_html__( 'Nonce is not valid please refresh the page', 'masterstudy-lms-learning-management-system' );
            wp_send_json( $r );
            die;
        } else {
            // nonce is valid

            $course_select = $data['course-select'];
            $assignment_title = $data['assignment-title'];
            $assignment_description = $data['assignment-description'];
            $assignment_file = $data['assignment-file'];


            if( empty($course_select) ):
                $r['message'] = esc_html__( 'please select a course', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            elseif ( empty($assignment_title) ):
                $r['message'] = esc_html__( 'assignment title is missing', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            elseif ( empty($assignment_description) ):
                $r['message'] = esc_html__( 'assignment description is missing', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            endif;


            // Create post object
            $new_assignment_data = array(
                'post_title'    => wp_strip_all_tags( $assignment_title ),
                'post_content'  => wp_strip_all_tags( $assignment_description ),
                'post_status'   => 'draft',
                'post_author'   => get_current_user_id(),
                'post_type' => 'stm-assignments',
            );

            // insert new post with type stm-assignments ( title, description )
            // Insert the post into the database
            $insert_assignment_id = wp_insert_post( $new_assignment_data );
            if( is_int($insert_assignment_id) ):
                // upload attachemnt file
                if( !empty($assignment_file) ):
                    // upload file as attachment and add meta to assignment post with attachment id
                    $upload_assignment = MPR_Core::upload_media($assignment_file);
                    if( is_int($upload_assignment) ):
                        // add post meta with attachment id
                        update_post_meta($insert_assignment_id, 'assignment_attachment', $upload_assignment);
                    endif;
                endif;

                // update post to 'publish'
                $data = array(
                    'ID' => $insert_assignment_id,
                    'post_status' => 'publish',
                );

                wp_update_post( $data );

                // add course new meta ( post_id => course_id, meta_key => curriculum, meta_value => implode($array(curriculum)) )
                $curriculum = get_post_meta($course_select, 'curriculum', true);
                if( !empty($curriculum) ):
                    // add assignemnt and update meta value
                    $old_value = explode(',', $curriculum);
                    if( !in_array($insert_assignment_id, $old_value) ):
                        $old_value[] = strval($insert_assignment_id);
                        $new_value = implode(',', $old_value);
                        update_post_meta($course_select, 'curriculum', $new_value);
                    endif;
                else:
                    // add new course meta with assignment id
                    update_post_meta($course_select, 'curriculum', $insert_assignment_id);
                endif;


                // insert in wp_stm_lms_curriculum_bind ( assigment_post_id, course_id, stm-assignments, current_strtotime (in secs) )
                global $wpdb;
                $table_name =  $wpdb->prefix . 'stm_lms_curriculum_bind';


                $row_data = array(
                    array(
                        'item_id' => $insert_assignment_id,
                        'course_id' => $course_select,
                        'item_type' => 'stm-assignments',
                        'date' => time() * 1000
                    )
                );

                MPR_Core::wpdb_bulk_insert($table_name, $row_data);

                $r['message'] = esc_html__( 'success', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            else:
                $r['message'] = esc_html__( 'Error: assignment was not created successfully', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            endif;


        }


    }

    // submit as assignment from learner side
    public static function submit_new_learner_assignment($data) {


        $nonce = $data['add_new_assignment_nonce'];
        if ( ! wp_verify_nonce( $nonce, 'add_new_assignment_nonce' ) ) {
            $r['message'] = esc_html__( 'Nonce is not valid please refresh the page', 'masterstudy-lms-learning-management-system' );
            wp_send_json( $r );
            die;
        } else {
            // nonce is valid

            $assignment_id = $data['assignment_id'];
            $course_id = $data['course_id'];
            $submitted_assignment_content = $data['submitted_assignment_content'];
            $submitted_assignment_file = $data['submitted_assignment_file'];


            if( empty($submitted_assignment_content) ):
                $r['message'] = esc_html__( 'please write assignment content', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            endif;

            // insert post with type ( stm-user-assignment ) => status pending => title User Display Name on Assignment Name (Abdallah Ahmed Oraby on “Assigment سلسلة العملات الرقمية”) => post content from textarea
            $learner_obj = get_user_by('id', get_current_user_id());
            $assignment_title = get_the_title($assignment_id);
            $post_title = $learner_obj->data->display_name . ' on " '. $assignment_title. ' " ';
            $new_assignment_data = array(
                'post_title'    => $post_title,
                'post_content'  => wp_strip_all_tags( $submitted_assignment_content ),
                'post_status'   => 'pending',
                'post_author'   => get_current_user_id(),
                'post_type' => 'stm-user-assignment',
            );

            $insert_learner_assignment_id = wp_insert_post( $new_assignment_data );
            if( is_int($insert_learner_assignment_id) ):

                // insert attachment and update its columns:
                //		post_excerpt => 'stm_lms_assignment'
                //		post_parent => stm-user-assignment ( last id )

                // upload attachemnt file
                if( !empty($submitted_assignment_file) ):
                    // upload file as attachment and add meta to assignment post with attachment id
                    $upload_assignment_id = MPR_Core::upload_media($submitted_assignment_file);
                    if( is_int($upload_assignment_id) ):

                        // update attachment data
                        $data = array(
                            'ID' => $upload_assignment_id,
                            'post_excerpt' => 'stm_lms_assignment',
                            'post_parent' => $insert_learner_assignment_id
                        );

                        wp_update_post( $data );

                    endif;
                endif;

//                insret these post meta:
//                status => passed / empty ( not checked ) / not_passed
//                try_num => 1
//                start_time => strtotime(now)
//                assignment_id => linked assignment id
//                student_id => learner id
//                end_time => strtotime(learner submit assignment )
//                course_id => linked course id


                add_post_meta($insert_learner_assignment_id,'status', '');
                add_post_meta($insert_learner_assignment_id,'try_num', 1);
                add_post_meta($insert_learner_assignment_id,'start_time', time() * 1000);
                add_post_meta($insert_learner_assignment_id,'end_time', '');
                add_post_meta($insert_learner_assignment_id,'assignment_id', $assignment_id);
                add_post_meta($insert_learner_assignment_id,'course_id', $course_id);
                add_post_meta($insert_learner_assignment_id,'student_id', get_current_user_id());




                $r['message'] = esc_html__( 'success', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;


            else:
                $r['message'] = esc_html__( 'Error: assignment was not submitted successfully, please try again', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            endif;


        }



    }

    // function to create zoom meeting and update post meta data
    public static function createZoomMeeting($post_id, $posted_zoom_data){

        $stmObj = new StmZoomPostTypes;

        $post_type = ! empty( $_POST['post_type'] ) ? sanitize_text_field( $_POST['post_type'] ) : '';

        if ( empty( $post_type ) ) {
            $post_type = get_post_type( $post_id );
        }




        if ( 'stm-zoom' === $post_type || 'stm-zoom-webinar' === $post_type ) {
            $settings   = get_option( 'stm_zoom_settings', array() );
            $api_key    = ! empty( $settings['api_key'] ) ? $settings['api_key'] : '';
            $api_secret = ! empty( $settings['api_secret'] ) ? $settings['api_secret'] : '';


            $host_id                   = ! empty( $posted_zoom_data['stm_host'] ) ? sanitize_text_field( $posted_zoom_data['stm_host'] ) : '';
            $title                     = ! empty( $posted_zoom_data['post_title'] ) ? sanitize_text_field( $posted_zoom_data['post_title'] ) : '';
            $agenda                    = ! empty( $posted_zoom_data['stm_agenda'] ) ? sanitize_text_field( $posted_zoom_data['stm_agenda'] ) : '';
            $start_date                = ! empty( $posted_zoom_data['stm_date'] ) ? apply_filters( 'eroom_sanitize_stm_date', $posted_zoom_data['stm_date'] ) : '';
            $start_time                = ! empty( $posted_zoom_data['stm_time'] ) ? sanitize_text_field( $posted_zoom_data['stm_time'] ) : '';
            $timezone                  = ! empty( $posted_zoom_data['stm_timezone'] ) ? sanitize_text_field( $posted_zoom_data['stm_timezone'] ) : '';
            $duration                  = ! empty( $posted_zoom_data['stm_duration'] ) ? intval( $posted_zoom_data['stm_duration'] ) : 60;
            $password                  = ! empty( $posted_zoom_data['stm_password'] ) ? sanitize_text_field( $posted_zoom_data['stm_password'] ) : '';
            $waiting_room              = ! empty( $posted_zoom_data['stm_waiting_room'] ) ? true : false;
            $join_before_host          = ! empty( $posted_zoom_data['stm_join_before_host'] ) ? true : false;
            $host_join_start           = ! empty( $posted_zoom_data['stm_host_join_start'] ) ? true : false;
            $start_after_participantst = ! empty( $posted_zoom_data['stm_start_after_participants'] ) ? true : false;
            $mute_participants         = ! empty( $posted_zoom_data['stm_mute_participants'] ) ? true : false;
            $enforce_login             = ! empty( $posted_zoom_data['stm_enforce_login'] ) ? true : false;

            if ( empty( $password ) ) {
                $generate_password = ! empty( $settings['generate_password'] ) ? $settings['generate_password'] : false;
                if ( $generate_password ) {
                    $password              = wp_generate_password( 8, false );
                    $posted_zoom_data['stm_password'] = $password;
                }
            }


            $start_date = $stmObj->current_date( $start_date, $timezone );


            $alternative_hosts = '';
            if ( ! empty( $posted_zoom_data['stm_alternative_hosts'] ) ) {
                $alternative_hosts = sanitize_text_field( $posted_zoom_data['stm_alternative_hosts'] );
            }
            if ( is_array( $alternative_hosts ) && ! empty( $alternative_hosts ) ) {
                $alternative_hosts = implode( ',', $alternative_hosts );
            }

            $meeting_start = strtotime( 'today', ( ( $start_date ) / 1000 ) );
            if ( ! empty( $start_time ) ) {
                $time = explode( ':', $start_time );
                if ( is_array( $time ) && count( $time ) === 2 ) {
                    $meeting_start = strtotime( "+{$time[0]} hours +{$time[1]} minutes", $meeting_start );
                }
            }
            $meeting_start                 = date( 'Y-m-d\TH:i:s', $meeting_start );
            $stm_approved_denied_countries = $stmObj::stm_approved_denied_countries();
            $data                          = array(
                'topic'      => $title,
                'type'       => 2,
                'start_time' => $meeting_start,
                'agenda'     => $agenda,
                'timezone'   => $timezone,
                'duration'   => $duration,
                'password'   => $password,
                'settings'   => array(
                    'waiting_room'           => $waiting_room,
                    'join_before_host'       => $join_before_host,
                    'host_video'             => $host_join_start,
                    'participant_video'      => $start_after_participantst,
                    'mute_upon_entry'        => $mute_participants,
                    'meeting_authentication' => $enforce_login,
                    'alternative_hosts'      => $alternative_hosts,
                ),
            );

            if ( $stm_approved_denied_countries ) {
                $data['settings'] = array_merge( $data['settings'], array( 'approved_or_denied_countries_or_regions' => $stm_approved_denied_countries ) );
            }

            $meeting_data = get_post_meta( $post_id, 'stm_zoom_data', true );

            if ( ! empty( $api_key ) && ! empty( $api_secret ) && ! empty( $host_id ) ) {
                remove_action( 'save_post', array( $stmObj, 'update_meeting' ), 10 );

                if ( 'stm-zoom' === $post_type ) {
                    $zoom_endpoint = new \Zoom\Endpoint\Meetings( $api_key, $api_secret );
                } elseif ( 'stm-zoom-webinar' === $post_type ) {
                    $zoom_endpoint = new \Zoom\Endpoint\Webinars( $api_key, $api_secret );
                }

                $data = apply_filters( 'stm_add_zoom_recurring_meeting_data', $data );

                $option_recurring_ids = get_option( 'stm_recurring_meeting_ids', array() );
                $key                  = array_search( $post_id, $option_recurring_ids );

                if ( false !== $key ) {
                    unset( $option_recurring_ids[ $key ] );
                }

                if ( isset( $posted_zoom_data['stm_recurring_enabled'] ) && ( 'on' === $posted_zoom_data['stm_recurring_enabled'] ) ) {
                    $option_recurring_ids[] = $post_id;
                }

                update_option( 'stm_recurring_meeting_ids', $option_recurring_ids );

                if ( empty( $meeting_data['id'] ) ) {
                    $new_meeting = $zoom_endpoint->create( $host_id, $data );
                    update_post_meta( $post_id, 'stm_zoom_data', $new_meeting );
                    do_action( 'stm_zoom_after_create_meeting', $post_id );
                } else {
                    $meeting_id = $meeting_data['id'];

                    $update_meeting = $zoom_endpoint->update( $meeting_id, $data );

                    if ( isset( $update_meeting['code'] ) && ( 204 == $update_meeting['code'] ) ) {
                        $zoom_meeting_data = $zoom_endpoint->meeting( $meeting_id );
                        update_post_meta( $post_id, 'stm_zoom_data', $zoom_meeting_data );
                    }

                    do_action( 'stm_zoom_after_update_meeting', $post_id );
                }


                // update zoom post meta date
                update_post_meta($post_id, 'stm_waiting_room', $posted_zoom_data['stm_waiting_room']);
                update_post_meta($post_id, 'stm_agenda', $posted_zoom_data['stm_agenda']);
                update_post_meta($post_id, 'stm_password', $password);
                update_post_meta($post_id, '_wp_page_template', 'default');
                update_post_meta($post_id, 'stm_host', $posted_zoom_data['stm_host']);
                update_post_meta($post_id, 'stm_timezone', $posted_zoom_data['stm_timezone']);
                update_post_meta($post_id, 'stm_duration', $posted_zoom_data['stm_duration']);
                update_post_meta($post_id, 'stm_time', $posted_zoom_data['stm_time']);
                update_post_meta($post_id, 'stm_date', $posted_zoom_data['stm_date']);

                if( !empty($new_meeting)):
                    return true;
                else:
                    return false;
                endif;

            } else {
                return false;
            }
        } else {
            return false;
        }

    }

    // function to create new zoom meeting post type stm-zoom
    public static function add_new_meeting_session($data){



        $nonce = $data['add_meeting_nonce'];
        if ( ! wp_verify_nonce( $nonce, 'add_meeting_nonce' ) ) {
            $r['message'] = esc_html__( 'Nonce is not valid please refresh the page', 'masterstudy-lms-learning-management-system' );
            wp_send_json( $r );
            die;
        } else {
            // nonce is valid

            $course_id = $data['course-select'];
            $meeting_date_utc = $data['meeting_date_utc'];
            $timezone = $data['timezone'];
            $meeting_duration = $data['meeting_duration'];
            $meeting_title = $data['meeting-title'];
            $meeting_description = $data['meeting-description'];
            $user_host = get_the_author_meta( 'stm_lms_zoom_host', get_current_user_id() );


            if( empty($course_id) ):
                $r['message'] = esc_html__( 'please select course', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            elseif ( empty($meeting_date_utc) ):
                $r['message'] = esc_html__( 'please select date and time', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            elseif ( empty($meeting_title) ):
                $r['message'] = esc_html__( 'please enter title', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            elseif ( empty($timezone) ):
                $r['message'] = esc_html__( 'please select timezone', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            elseif ( empty($meeting_duration) ):
                $r['message'] = esc_html__( 'please enter session duration', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            elseif ( empty($user_host) ):
                $r['message'] = esc_html__( 'host is not defined. please contact administrator', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            endif;

            //  insert new post with type ( stm-zoom )
            $new_meeting_post_data = array(
                'post_title'    => $meeting_title,
                'post_content'  => wp_strip_all_tags( $meeting_description ),
                'post_status'   => 'publish',
                'post_author'   => get_current_user_id(),
                'post_type' => 'stm-zoom',
            );

            $insert_new_meeting_post_id = wp_insert_post( $new_meeting_post_data );
            if( is_int($insert_new_meeting_post_id) ):

                // link meeting to course => update meta
                update_post_meta( $course_id, 'live_session_id', $insert_new_meeting_post_id );

                //  add new zoom meeting and update post meta
                $post_zoom_data =  array(
                    'stm_host' => $user_host,
                    'post_title' => $meeting_title,
                    'stm_agenda' => $meeting_description,
                    'stm_date' => strtotime($meeting_date_utc) * 1000,
                    'stm_time' => date('H:i', strtotime($meeting_date_utc)),
                    'stm_timezone' => $timezone,
                    'stm_duration' => $meeting_duration,
                    'stm_password' => null,
                    'stm_waiting_room' => 'on',
                    'stm_join_before_host' => null,
                    'stm_host_join_start' => null,
                    'stm_start_after_participants' => '',
                    'stm_mute_participants' => null,
                    'stm_enforce_login' => null,
                    'stm_alternative_hosts' => null,
                    'stm_recurring_enabled' => null,
                );

                $new_zoom_meeting = MPR_Core::createZoomMeeting($insert_new_meeting_post_id, $post_zoom_data);
                if( $new_zoom_meeting == true ):
                    $r['message'] = esc_html__( 'success', 'masterstudy-lms-learning-management-system' );
                    wp_send_json( $r );
                    die;
                else:
                    $r['message'] = esc_html__( 'Error: live session was not added successfully', 'masterstudy-lms-learning-management-system' );
                    wp_send_json( $r );
                    die;
                endif;


            else:
                $r['message'] = esc_html__( 'Error: live session was not added successfully, please try again', 'masterstudy-lms-learning-management-system' );
                wp_send_json( $r );
                die;
            endif;



        }


    }

    // function to get previous learner qa
    public static function get_learner_qa(){
        global $wpdb;
        $sender_id = get_current_user_id();
        $qa_table = $wpdb->prefix . 'qa';
        $qa_results = $wpdb->get_results(
            "SELECT * FROM $qa_table WHERE sender_id = {$sender_id} ORDER BY created_at DESC "
        );
        $wpdb->flush();

        if( !empty($qa_results) ):
            return $qa_results;
        else:
            return [];
        endif;


    }

    // function to get all learners qa
    public static function get_instructor_qa(){
        global $wpdb;
        $qa_table = $wpdb->prefix . 'qa';
        $qa_results = $wpdb->get_results(
            "SELECT * FROM $qa_table WHERE sender_id IS NOT NULL ORDER BY created_at DESC "
        );
        $wpdb->flush();

        if( !empty($qa_results) ):
            return $qa_results;
        else:
            return [];
        endif;


    }

    // function to get replies to qa by id
    public static function get_qa_responds($qa_id){
        global $wpdb;
        $qa_table = $wpdb->prefix . 'qa';
        $qa_results = $wpdb->get_results(
            "SELECT * FROM $qa_table WHERE parent_qa = {$qa_id} ORDER BY created_at DESC "
        );
        $wpdb->flush();

        if( !empty($qa_results) ):
            return $qa_results;
        else:
            return [];
        endif;


    }

    // Bulk inserts records into a table using WPDB.  All rows must contain the same keys.
    // Returns number of affected (inserted) rows.
    public static function wpdb_bulk_insert($table, $rows) {
        global $wpdb;

        // Extract column list from first row of data
        $columns = array_keys($rows[0]);
        asort($columns);
        $columnList = '`' . implode('`, `', $columns) . '`';

        // Start building SQL, initialise data and placeholder arrays
        $sql = "INSERT INTO `$table` ($columnList) VALUES\n";

        $placeholders = array();
        $data = array();

        // Build placeholders for each row, and add values to data array
        foreach ($rows as $row) {
            ksort($row);
            $rowPlaceholders = array();

            foreach ($row as $key => $value) {
                $data[] = $value;
                $rowPlaceholders[] = is_numeric($value) ? '%d' : '%s';
            }

            $placeholders[] = '(' . implode(', ', $rowPlaceholders) . ')';
        }

        // Stitch all rows together
        $sql .= implode(",\n", $placeholders);

        // Run the query.  Returns number of affected rows.
        return $wpdb->query($wpdb->prepare($sql, $data));
    }

    // function to update row with array of data
    public static function updateRecord($table_name, $data_array_to_update) {
        global $wpdb;
        if( empty($table_name) || empty($data_array_to_update) ):
            return false;
        endif;

        $primary_key = key(array_slice($data_array_to_update, 0, 1));
        $id_to_update = $data_array_to_update[$primary_key];
        $wpdb->update($table_name, $data_array_to_update, array('id'=>$id_to_update));
    }

    // function to delete row with id and tablename
    public static function deleteRecord($table_name, $id) {
        global $wpdb; 							// WPDB class object

        $wpdb->delete(
            $table_name, 		// table name with dynamic prefix
            ['id' => $id], 						// which id need to delete
            ['%d'], 							// make sure the id format
        );
    }

    // get wp user id by meta_key
    public static function get_user_by_meta_data( $meta_key, $meta_value ) {

        // Query for users based on the meta data
        $user_query = new WP_User_Query(
            array(
                'meta_key'	  =>	$meta_key,
                'meta_value'	=>	$meta_value
            )
        );

        // Get the results from the query, returning the first user
        $users = $user_query->get_results();

        if( empty($users) ) return false;
        return $users[0];

    }

    // function to get all instructors
    public static function get_all_instructors(){
        $args = array(
            'role'    => 'stm_lms_instructor',
        );
        $users = get_users( $args );
        return $users;
        if( !empty($users) ):
            foreach ( $users as $user ):
                $user_id = $user->data->ID;
            endforeach;
        else:
            return false;
        endif;
    }

    // get learner allowed categories
    public static function get_learner_allowed_categories($wp_user_id)
    {
        $open_categories = [];
        $allowed_categories = [];
        // get all posts with author id => learner id, and post_status = 'wcm-active', and post_type = 'wc_user_membership'
        $args = array(
            'post_type' => 'wc_user_membership',
            'post_status' => 'wcm-active',
            'author' => $wp_user_id
        );
        $memberships = get_posts($args);


        if( empty($memberships) ) return false;
        $memberships_posts = array_column($memberships, 'ID');


        foreach ( $memberships_posts as $memberships_post ):

            // get post meta data _order_id
            $order_id = get_post_meta($memberships_post, '_order_id', true);
            if( !empty($order_id) ):

                // get meta _wc_memberships_access_granted for order_id
                $wc_memberships_access_granted = get_post_meta($order_id, '_wc_memberships_access_granted', true);

                if( !empty($wc_memberships_access_granted) ):

                    // get expire date for membership if expired remove from allowed
                    $expire_date = get_post_meta($memberships_post, '_end_date', true);
                    if( empty($expire_date) || ( strtotime($expire_date) > strtotime(date('Y-m-d H:i:s')) ) ):
                        // membership is active

                        //if( $wc_memberships_access_granted[$memberships_post]['already_granted'] == 'yes' && $wc_memberships_access_granted[$memberships_post]['granting_order_status'] == 'completed' ):
                        $open_categories[] = $memberships_post;
                        //endif;

                    endif;

                endif;

            endif;



        endforeach;

        if( !empty($open_categories) ):
            foreach ( $open_categories as $open_category ):
                // get post parent
                $open_categories_id = get_post_parent($open_category);
                if( !empty($open_categories_id) ):
                    $allowed_categories[] = $open_categories_id->post_name;
                endif;
            endforeach;
        endif;

        return $allowed_categories;

    }

    // function to join student to course
    public static function add_user_to_course($email, $course_id){

        if ( empty( $email ) || empty($course_id) ) return false;

        $course_id = intval( $course_id );

        if ( ! is_email( $email ) ) return false;

        // now add course to user
        $user_obj = get_user_by('email', $email);
        $user_id = $user_obj->data->id;
        STM_LMS_Course::add_user_course(
            $course_id,
            $user_id,
            STM_LMS_Course::get_first_lesson( $course_id ),
            0,
            false,
            false,
            false,
            $instructor_id
        );

//        $adding = STM_LMS_Instructor::_add_student_to_course( array( $course_id ), array( $email ) );
//
//        if ( ! $adding['error'] ) {
//            $adding['status'] = 'success';
            $meta             = STM_LMS_Helpers::parse_meta_field( $course_id );
            if ( ! empty( $meta['current_students'] ) ) {
                update_post_meta( $course_id, 'current_students', ++ $meta['current_students'] );
            } else {
                update_post_meta( $course_id, 'current_students', 1 );
            }
//        }


    }

    // on learner login join him to all courses in category he has membership in it
    public static function join_student_basen_on_memberships($wp_user_id){

        $user_obj = get_user_by('id', $wp_user_id);
        $user_email = $user_obj->data->user_email;

        $allowed_categories = MPR_Core::get_learner_allowed_categories( $wp_user_id );

        if( !empty($allowed_categories) ):

            $courses_under_category = get_posts(
                array(
                    'posts_per_page' => -1,
                    'post_type' => 'stm-courses',
                    'tax_query' => array(
                        array(
                            'taxonomy' => 'stm_lms_course_taxonomy',
                            'field' => 'slug',
                            'terms' => $allowed_categories,
                        )
                    )
                )
            );

        endif;



        if( !empty($courses_under_category) ):
            $courses_ids_under_category = array_column($courses_under_category, 'ID');

            if( !empty($courses_ids_under_category) &&  !empty($user_email) ):
                foreach ( $courses_ids_under_category as $course_id ):
                    // join student to course
                    MPR_Core::add_user_to_course($user_email, $course_id);
                endforeach;
            endif;

        endif;


    }

    // function to sync old courses videos to link videos with it
    public static function sync_old_courses_videos(){
        $synced_courses = 0;
        // get all courses
        $all_courses = get_posts(
            array(
                'posts_per_page' => -1,
                'post_type' => 'stm-courses',
                'post_status' => 'publish',
            )
        );

        if( !empty($all_courses) ):
            $courses_ids = array_column($all_courses, 'ID');
            foreach ( $courses_ids as $course_id ):
                // get old videos in meta
                $old_course_video_ids = get_post_meta($course_id, 'course_video_id', false);
                // get lessons in each course
                $curriculum = get_post_meta( $course_id, 'curriculum', true );
                if( !empty($curriculum) ):
                    $curriculum_ids = explode(',', $curriculum);
                    foreach ( $curriculum_ids as $curriculum_id ):
                        $curriculum_id = (int) $curriculum_id;
                        $video_attach_id = get_post_meta($curriculum_id, 'lesson_video', true);
                        if( !empty($video_attach_id) ):
                            if( !in_array($video_attach_id, $old_course_video_ids) ):
                                // add course_video_id meta
                                add_post_meta( $course_id, 'course_video_id', $video_attach_id );
                            endif;
                        endif;
                    endforeach;
                endif;
                $synced_courses++;
            endforeach;
            return $synced_courses;
        else:
            return 0;
        endif;


    }

    // function to update user progress in a course
    public static function update_user_course_progress( $user_id, $course_id, $progress ) {
        global $wpdb;
        $table = stm_lms_user_courses_name( $wpdb );

        // get old course progress
        $old_progress = $wpdb->get_results(
            "SELECT * FROM $table  WHERE user_id = {$user_id} AND course_id = {$course_id} "
        );
        $wpdb->flush();
        if( empty($old_progress) ) return false;

        $wpdb->update( $table,
            [ 'user_id' => $user_id, 'course_id' => $course_id, 'progress_percent' => $progress ],
            [ 'user_course_id' => $old_progress[0]->user_course_id ]
        );

    }

    // function to get course progress for user
    public static function get_user_course_progress( $user_id, $course_id ) {
        global $wpdb;
        $table = stm_lms_user_courses_name( $wpdb );

        // get old course progress
        $old_progress = $wpdb->get_results(
            "SELECT * FROM $table  WHERE user_id = {$user_id} AND course_id = {$course_id} "
        );
        $wpdb->flush();
        if( empty($old_progress) ) return false;

        return $old_progress[0]->progress_percent;

    }

    // function to insert attachment from external url
    /**
     * Insert an attachment from a URL address.
     *
     * @param  string   $url            The URL address.
     * @param  int|null $parent_post_id The parent post ID (Optional).
     * @return int|false                The attachment ID on success. False on failure.
     */
    public static function wp_insert_attachment_from_url( $url, $parent_post_id = null ) {

//        if ( ! class_exists( 'WP_Http' ) ) {
//            require_once ABSPATH . WPINC . '/class-http.php';
//        }
//
//        $http     = new WP_Http();
//        $response = $http->request( $url );
//        if ( 200 !== $response['response']['code'] ) {
//            return false;
//        }
//
//        $upload = wp_upload_bits( basename( $url ), null, $response['body'] );
//        if ( ! empty( $upload['error'] ) ) {
//            return false;
//        }

//        $file_path        = $upload['file'];

        // If the function it's not available, require it.
        if ( ! function_exists( 'download_url' ) ) {
            require_once ABSPATH . 'wp-admin/includes/file.php';
        }

        // Now you can use it!
        $file_url = $url;
        $tmp_file = download_url( $file_url );

        $path_parts = pathinfo($tmp_file);
        $tmp_name = $path_parts['filename'];
        $tmp_ext = $path_parts['extension'];
        $tmp_file_name = substr($tmp_name,0,15) . date('Y-m-d-H-i-s') . '.' . 'mp4';
        $new_dir = wp_get_upload_dir()['path'];

        // Sets file final destination.
        $new_file_path = $new_dir . '/' . $tmp_file_name;

        // Copies the file to the final destination and deletes temporary file.
        copy( $tmp_file, $new_file_path );
        @unlink( $tmp_file );


        $file_path        = $new_file_path;
        $file_name        = basename( $file_path );
        $file_type        = wp_check_filetype( $file_name, null );
        $attachment_title = sanitize_file_name( pathinfo( $file_name, PATHINFO_FILENAME ) );
        $wp_upload_dir    = wp_upload_dir();

        return $file_type['type'];


        $post_info = array(
            'guid'           => $wp_upload_dir['url'] . '/' . $file_name,
            'post_mime_type' => $file_type['type'],
            'post_title'     => $attachment_title,
            'post_content'   => '',
            'post_status'    => 'inherit',
        );

        // Create the attachment.
        $attach_id = wp_insert_attachment( $post_info, $file_path, $parent_post_id );

        // Include image.php.
        //require_once ABSPATH . 'wp-admin/includes/image.php';

        // Generate the attachment metadata.
        //$attach_data = wp_generate_attachment_metadata( $attach_id, $file_path );

        // Assign metadata to attachment.
        //wp_update_attachment_metadata( $attach_id, $attach_data );

        return $attach_id;

    }

    // function to re calculate course complete percentage
    public static function count_completed($course_id){
        $course_video_ids = get_post_meta($course_id, 'course_video_id', false);
        $marked_completed_user_meta = get_user_meta( get_current_user_id(), 'mark_status', true );
        if( empty($marked_completed_user_meta) ):
            $marked_completed_user_meta = [];
        else:
            $marked_completed_user_meta = json_decode($marked_completed_user_meta);
        endif;
        $course_percentage = 0;
        if (!empty($course_video_ids)):
            $step_percentage = 100 / count($course_video_ids);
            $step = 0;
            foreach ($course_video_ids as $course_video_id):
//                $mark_status = get_post_meta($course_video_id, 'mark_status', true);
//                if ($mark_status == 'completed'):
//                    $step++;
//                endif;

                if( in_array($course_video_id,$marked_completed_user_meta) ):
                    $step++;
                endif;
            endforeach;
            $course_percentage = round($step_percentage * $step,0);
        endif;
        return $course_percentage;
    }

    // function to get lessons ( videos ) count in course
    public static function get_lessons_count($course_id){
        $course_video_ids = get_post_meta($course_id, 'course_video_id', false);
        if( !empty($course_video_ids) ):
            return count($course_video_ids);
        else:
            return 0;
        endif;
    }

} // end of class MPR_Core





